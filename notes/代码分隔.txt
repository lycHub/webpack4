// 方法一：
  可以将第三方代码导入到单独的文件，再将其设为entry,
  这样以后浏览器就会直接读取缓存内容

//  方法二
optimization: {
      // 添加压缩插件
      minimizer: [new OptimizeCSSAssetsPlugin({})],   // 压缩css
      /*
        以下情况会执行代码分隔：
          新的代码块被共享或者来自node_modules文件夹
          新的代码块大于30kb(在min+giz之前)
          按需加载代码块的请求数量应该<=5
          页面初始化时加载代码块的请求数量应该<=3
          为了满足以上最后两个条件,倾向于更大的代码块.
      */
     splitChunks: { // 代码分隔配置
       /*
       * 选择要进行分割的包
       * 可选值： all（推荐）, async(默认，只分隔异步代码), and initial
       * 还可以传入函数精确控制
       * chunks (chunk) {
            // exclude `my-excluded-chunk`
            return chunk.name !== 'my-excluded-chunk';
          }
       * */
       chunks: 'all',

       // 默认，大于30k的包才做代码分割
       minSize: 30000,

       // 默认，分割出来的每个包最大size，
       minSize: 0,

       // 默认，至少被引入一次就进行代码分隔
       minChunks: 1,

       // 默认，浏览器最多并行请求5个js文件
       maxAsyncRequests: 5,

       // 默认，入口最多引入3个js包
       maxInitialRequests: 3,

       // 默认，文件名连接符
       automaticNameDelimiter: '~',

       // 默认，最多只分隔5个请求包
       name: true,

       cacheGroups: {
        vendors: {  // vendors是组名

          // 默认，只对node_modules里的代码进行分隔
          test: /[\\/]node_modules[\\/]/,

          /*
            默认，每个组都会有个优先级，
            如果某个包满足多个组的test规则，就按优先级来判断归哪个组
            数值越大，优先级越高
          */
          priority: -10,

          // 分割后的文件名（默认是：组名~入口名.js，即verdors~main.js）
          filename: 'vendors.js',

          // 强制分隔，无视minChunks、maxAsyncRequests等选项，默认false
          enforce: true
        }
      },


      default: {  // default是组名, 分隔不在node_modules里的代码
        minChunks: 2,   // 默认
        priority: -20,    // 默认

        /*
          复用已存在的chunk,
          比如index.js里引入axios和test.js
          test里也引入了axios，那么axios就会被复用
        */
        reuseExistingChunk: true
      },

      /*
      * 将项目所有css打包到一个文件中
      * 还可以分入口打包：https://webpack.js.org/plugins/mini-css-extract-plugin
      * */
      styles: {
        name: 'styles',
        test: /\.scss$/,
        chunks: 'all',
        enforce: true,
      }
     }
   }


   ps: 如果是异步引入（按需加载），无需配置自动分隔

   function getComponent() {
     var element = document.createElement('div');

     /*
      import(/* webpackChunkName: "lodash" */ 'lodash')
      import()返回一个promise
      默认分隔后的文件名为0.js
      /* webpackChunkName: "lodash" */这段注释可以改变默认的文件名
      /* webpackPrefetch: true */ 这段表示改模块开启Prefetch预加载<link rel="prefetch" href="verdor~main.js">
      /* webpackPreload: true */ 这段表示改模块开启Preload预加载<link rel="preload" href="verdor~main.js">
     */

     return import(/* webpackChunkName: "lodash" */ 'lodash').then(({ default: _ }) => {
       var element = document.createElement('div');
       element.innerHTML = _.join(['Hello', 'webpack'], ' ');
       return element;
     }).catch(error => 'An error occurred while loading the component');
   }


   // 按需加载，当点击了页面，才会请求vendors~lodash.js文件
   // 和单页应用路由跳转类似
   window.addEventListener('click', function(){
    getComponent().then(component => {
       document.body.appendChild(component);
     })
   });
